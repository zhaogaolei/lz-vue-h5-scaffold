一、文件目录规范
     1.文件夹名：尽量小写
     2.模块：
       assets     -- 静态资源存放目录，比如字体文件，图片，css
       components -- 业务公共组件存放目录，可以按照模块拆分，统一index.js导出
                     比如：|-components
                            |-FirstComponent
                              |-FirstComponent.vue
                              |-index.js
       constants  -- 全局常量定义目录，比如：正则，业务常量
       router     -- 路由配置目录，可以按照模块拆分
       services   -- 后端服务配置目录，按照模块进行拆分，比如：user.js home.js
       store      -- 集中存储管理应用的所有组件的状态，可以按照模块拆分
       utils      -- 公共工具函数存放目录
       views      -- 所有页面存放目录，可以按照模块分别创建对应文件夹，
                     比如：|-views
                            |-my (父模块)
                              |-order (子模块)
                                |-index.vue
                              |-wallet (子模块)
                                |-index.vue
                              |-index.vue

二、编码规范
     ①命名规范
      1).camel命名法，形如thisIsAnApple
      2).pascal命名法，形如ThisIsAnApple
      3).下划线命名法，形如this_is_an_apple
      4).中划线命名法，形如this-is-an-apple

      a).变量名：必须使用camel命名法
      b).参数名：必须使用camel命名法
      c).函数名：必须使用camel命名法
      d).方法/属性：必须使用camel命名法
      e).私有（保护）成员：必须以下划线_开头
      f).常量名：必须使用全部大写的下划线命名法，如IS_DEBUG
      g).类名：必须使用pascal命名法
      h).枚举名：必须使用pascal命名法
      i).枚举的属性：必须使用全部大写的下划线命名法
      css 样式命名规范
      a)class名  使用中划线命名法
      b)尽量不使用!important

     ②ES6标准
        [尽量做]Arrow functions: <C onPress={() => {}}
        [尽量做]Block scoping: let greeting = 'hi';
        Call spread: Math.max(...array);
        Classes: class C extends React.Component { render() { return <View />; } }
        [尽量做]Constants: const answer = 42;
        [项目引入的时候尽量做]Destructuring: const {isActive, style} = this.props;
        [尽量用]for...of: for (var num of [1, 2, 3]) {}
        Modules: import React, { Component } from 'react-native';
        Computed Properties: var key = 'abc'; var obj = {[key]: 10};
        Object Consise Method: var obj = { method() { return 10; } };
        Object Short Notation: var name = 'vjeux'; var obj = { name };
        Rest Params: function(type, ...args) { }
        [推荐使用]Template Literals: var who = 'world'; var str = `Hello ${who}`;
        尽量以ES标准去完成JavaScript编码
        具体ES6 ES7特性 推荐网站  http://es6.ruanyifeng.com/ 讲的很清楚

     ③注意事项
      

三、其他规范以及提醒
     1、git迁入时 尽量写好注释
     2、git多人工作于同一个目录文件的时候,写好相应的注释,迁入前 进行本地备份
     3、合理利用插件，不要乱加插件，插件错误请及时移除,可以npm命令移除或者直接删除package中的依赖
     4、减少JQuery引入